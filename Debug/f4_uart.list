
f4_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002784  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800290c  0800290c  0001290c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002984  08002984  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800298c  0800298c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000001c  080029b0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080029b0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074de  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014a9  00000000  00000000  0002752a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  000289d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000608  00000000  00000000  00029070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f936  00000000  00000000  00029678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005b4b  00000000  00000000  00048fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0761  00000000  00000000  0004eaf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010f25a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b0  00000000  00000000  0010f2d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028f4 	.word	0x080028f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080028f4 	.word	0x080028f4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <Ringbuf_init+0x3c>)
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <Ringbuf_init+0x40>)
 80004e0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <Ringbuf_init+0x44>)
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <Ringbuf_init+0x48>)
 80004e6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <Ringbuf_init+0x4c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <Ringbuf_init+0x4c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f042 0201 	orr.w	r2, r2, #1
 80004f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <Ringbuf_init+0x4c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	68da      	ldr	r2, [r3, #12]
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <Ringbuf_init+0x4c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f042 0220 	orr.w	r2, r2, #32
 8000506:	60da      	str	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000064 	.word	0x20000064
 8000518:	20000038 	.word	0x20000038
 800051c:	20000060 	.word	0x20000060
 8000520:	2000004c 	.word	0x2000004c
 8000524:	20000068 	.word	0x20000068

08000528 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	1c59      	adds	r1, r3, #1
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <store_char+0x4c>)
 800053c:	fba3 2301 	umull	r2, r3, r3, r1
 8000540:	08da      	lsrs	r2, r3, #3
 8000542:	4613      	mov	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	1aca      	subs	r2, r1, r3
 800054c:	60fa      	str	r2, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	691a      	ldr	r2, [r3, #16]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	429a      	cmp	r2, r3
 8000556:	d007      	beq.n	8000568 <store_char+0x40>
    buffer->buffer[buffer->head] = c;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	683a      	ldr	r2, [r7, #0]
 800055e:	79f9      	ldrb	r1, [r7, #7]
 8000560:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	60da      	str	r2, [r3, #12]
  }
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	cccccccd 	.word	0xcccccccd

08000578 <Look_for>:

int Look_for (char *str, char *buffertolookinto)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff fe20 	bl	80001c8 <strlen>
 8000588:	4603      	mov	r3, r0
 800058a:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 800058c:	6838      	ldr	r0, [r7, #0]
 800058e:	f7ff fe1b 	bl	80001c8 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 800059e:	e002      	b.n	80005a6 <Look_for+0x2e>
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	3301      	adds	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	6839      	ldr	r1, [r7, #0]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d1f2      	bne.n	80005a0 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx])
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	6839      	ldr	r1, [r7, #0]
 80005c6:	440b      	add	r3, r1
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d111      	bne.n	80005f2 <Look_for+0x7a>
	{
		while (str[so_far] == buffertolookinto[indx])
 80005ce:	e005      	b.n	80005dc <Look_for+0x64>
		{
			so_far++;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
			indx++;
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	3301      	adds	r3, #1
 80005da:	613b      	str	r3, [r7, #16]
		while (str[so_far] == buffertolookinto[indx])
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	6839      	ldr	r1, [r7, #0]
 80005e8:	440b      	add	r3, r1
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d0ef      	beq.n	80005d0 <Look_for+0x58>
 80005f0:	e008      	b.n	8000604 <Look_for+0x8c>
		}
	}
	else
	{
		so_far =0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
		if (indx >= bufferlength) return -1;
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	dbcf      	blt.n	800059e <Look_for+0x26>
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	e007      	b.n	8000614 <Look_for+0x9c>
		goto repeat;
	}

	if (so_far == stringlength) return 1;
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	d101      	bne.n	8000610 <Look_for+0x98>
 800060c:	2301      	movs	r3, #1
 800060e:	e001      	b.n	8000614 <Look_for+0x9c>
	else return -1;
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <Uart_read>:

int Uart_read(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <Uart_read+0x58>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	68da      	ldr	r2, [r3, #12]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <Uart_read+0x58>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	429a      	cmp	r2, r3
 8000630:	d102      	bne.n	8000638 <Uart_read+0x1c>
  {
    return -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e017      	b.n	8000668 <Uart_read+0x4c>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <Uart_read+0x58>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <Uart_read+0x58>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	691b      	ldr	r3, [r3, #16]
 8000642:	5cd3      	ldrb	r3, [r2, r3]
 8000644:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <Uart_read+0x58>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	1c59      	adds	r1, r3, #1
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <Uart_read+0x58>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <Uart_read+0x5c>)
 8000654:	fba3 2301 	umull	r2, r3, r3, r1
 8000658:	08da      	lsrs	r2, r3, #3
 800065a:	4613      	mov	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	1aca      	subs	r2, r1, r3
 8000664:	6102      	str	r2, [r0, #16]
    return c;
 8000666:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	20000064 	.word	0x20000064
 8000678:	cccccccd 	.word	0xcccccccd

0800067c <Uart_write>:

void Uart_write(int c)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db28      	blt.n	80006dc <Uart_write+0x60>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <Uart_write+0x6c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	1c59      	adds	r1, r3, #1
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <Uart_write+0x70>)
 8000694:	fba3 2301 	umull	r2, r3, r3, r1
 8000698:	08da      	lsrs	r2, r3, #3
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	1aca      	subs	r2, r1, r3
 80006a4:	60fa      	str	r2, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80006a6:	bf00      	nop
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <Uart_write+0x6c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	691a      	ldr	r2, [r3, #16]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d0f9      	beq.n	80006a8 <Uart_write+0x2c>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <Uart_write+0x6c>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <Uart_write+0x6c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	b2c9      	uxtb	r1, r1
 80006c2:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <Uart_write+0x6c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	60da      	str	r2, [r3, #12]

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <Uart_write+0x74>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <Uart_write+0x74>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006da:	60da      	str	r2, [r3, #12]
	}
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	20000060 	.word	0x20000060
 80006ec:	cccccccd 	.word	0xcccccccd
 80006f0:	20000068 	.word	0x20000068

080006f4 <IsDataAvailable>:

int IsDataAvailable(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <IsDataAvailable+0x3c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <IsDataAvailable+0x3c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	b29b      	uxth	r3, r3
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	b29b      	uxth	r3, r3
 800070c:	330a      	adds	r3, #10
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <IsDataAvailable+0x40>)
 8000712:	fba3 1302 	umull	r1, r3, r3, r2
 8000716:	08d9      	lsrs	r1, r3, #3
 8000718:	460b      	mov	r3, r1
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	440b      	add	r3, r1
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	b29b      	uxth	r3, r3
}
 8000724:	4618      	mov	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000064 	.word	0x20000064
 8000734:	cccccccd 	.word	0xcccccccd

08000738 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000740:	e006      	b.n	8000750 <Uart_sendstring+0x18>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	1c5a      	adds	r2, r3, #1
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff96 	bl	800067c <Uart_write>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f4      	bne.n	8000742 <Uart_sendstring+0xa>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	f003 0320 	and.w	r3, r3, #32
 800077e:	2b00      	cmp	r3, #0
 8000780:	d013      	beq.n	80007aa <Uart_isr+0x4a>
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	f003 0320 	and.w	r3, r3, #32
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00e      	beq.n	80007aa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <Uart_isr+0xb8>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fec0 	bl	8000528 <store_char>
        return;
 80007a8:	e033      	b.n	8000812 <Uart_isr+0xb2>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d02e      	beq.n	8000812 <Uart_isr+0xb2>
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d029      	beq.n	8000812 <Uart_isr+0xb2>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <Uart_isr+0xbc>)
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <Uart_isr+0xbc>)
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d108      	bne.n	80007dc <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007d8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80007da:	e01a      	b.n	8000812 <Uart_isr+0xb2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <Uart_isr+0xbc>)
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <Uart_isr+0xbc>)
 80007e2:	5cd3      	ldrb	r3, [r2, r3]
 80007e4:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <Uart_isr+0xbc>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	1c59      	adds	r1, r3, #1
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <Uart_isr+0xc0>)
 80007ee:	fba3 2301 	umull	r2, r3, r3, r1
 80007f2:	08da      	lsrs	r2, r3, #3
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	1aca      	subs	r2, r1, r3
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <Uart_isr+0xbc>)
 8000800:	611a      	str	r2, [r3, #16]
    	      huart->Instance->SR;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	7bba      	ldrb	r2, [r7, #14]
 800080e:	605a      	str	r2, [r3, #4]
    	return;
 8000810:	bf00      	nop
    }
}
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000064 	.word	0x20000064
 800081c:	2000004c 	.word	0x2000004c
 8000820:	cccccccd 	.word	0xcccccccd

08000824 <So_sanh>:
			index++;
		}
	}
}
*/
int So_sanh(char *chuoi){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	if (Look_for(chuoi,rx_buffer.buffer)== 1){
 800082c:	4906      	ldr	r1, [pc, #24]	; (8000848 <So_sanh+0x24>)
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fea2 	bl	8000578 <Look_for>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d101      	bne.n	800083e <So_sanh+0x1a>
		return 1;
 800083a:	2301      	movs	r3, #1
 800083c:	e000      	b.n	8000840 <So_sanh+0x1c>
	}else{
		return 0;
 800083e:	2300      	movs	r3, #0
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000038 	.word	0x20000038

0800084c <HAL_GPIO_EXTI_Callback>:
uint8_t dem=0;
char *pump1="a0x\r\n";
char *pump2="b2x\r\n";
char *pump3="c4x\r\n";
char *pump4="d6x\r\n";
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
//		dem++;
//		for(int x=500000;x>0;x--);
//		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
//		HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
//	}
switch(GPIO_Pin)
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800085c:	d050      	beq.n	8000900 <HAL_GPIO_EXTI_Callback+0xb4>
 800085e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000862:	dc02      	bgt.n	800086a <HAL_GPIO_EXTI_Callback+0x1e>
 8000864:	2b80      	cmp	r3, #128	; 0x80
 8000866:	d009      	beq.n	800087c <HAL_GPIO_EXTI_Callback+0x30>
	for(int i=0;i<1000000;i++);
	EXTI->PR|=GPIO_PIN_10;
	break;
}
}
}
 8000868:	e113      	b.n	8000a92 <HAL_GPIO_EXTI_Callback+0x246>
switch(GPIO_Pin)
 800086a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800086e:	f000 808a 	beq.w	8000986 <HAL_GPIO_EXTI_Callback+0x13a>
 8000872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000876:	f000 80c9 	beq.w	8000a0c <HAL_GPIO_EXTI_Callback+0x1c0>
}
 800087a:	e10a      	b.n	8000a92 <HAL_GPIO_EXTI_Callback+0x246>
{   if(pump1=="a0x\r\n"){
 800087c:	4b87      	ldr	r3, [pc, #540]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x250>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a87      	ldr	r2, [pc, #540]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x254>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d103      	bne.n	800088e <HAL_GPIO_EXTI_Callback+0x42>
	Uart_sendstring("a1x\r\n");
 8000886:	4887      	ldr	r0, [pc, #540]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x258>)
 8000888:	f7ff ff56 	bl	8000738 <Uart_sendstring>
 800088c:	e002      	b.n	8000894 <HAL_GPIO_EXTI_Callback+0x48>
				Uart_sendstring("a0x\r\n");
 800088e:	4884      	ldr	r0, [pc, #528]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x254>)
 8000890:	f7ff ff52 	bl	8000738 <Uart_sendstring>
	for(int i=0;i<1000000;i++);
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
 8000898:	e002      	b.n	80008a0 <HAL_GPIO_EXTI_Callback+0x54>
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	3301      	adds	r3, #1
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
 80008a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a2:	4a81      	ldr	r2, [pc, #516]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	ddf8      	ble.n	800089a <HAL_GPIO_EXTI_Callback+0x4e>
	int i=0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
	while(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7)&(i<1000000))
 80008ac:	e002      	b.n	80008b4 <HAL_GPIO_EXTI_Callback+0x68>
		i++;
 80008ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b0:	3301      	adds	r3, #1
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
	while(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7)&(i<1000000))
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	487d      	ldr	r0, [pc, #500]	; (8000aac <HAL_GPIO_EXTI_Callback+0x260>)
 80008b8:	f000 ff7a 	bl	80017b0 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf0c      	ite	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	2300      	movne	r3, #0
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ca:	4977      	ldr	r1, [pc, #476]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80008cc:	428b      	cmp	r3, r1
 80008ce:	bfd4      	ite	le
 80008d0:	2301      	movle	r3, #1
 80008d2:	2300      	movgt	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4013      	ands	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1e7      	bne.n	80008ae <HAL_GPIO_EXTI_Callback+0x62>
	for(int i=0;i<1000000;i++);
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008e2:	e002      	b.n	80008ea <HAL_GPIO_EXTI_Callback+0x9e>
 80008e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e6:	3301      	adds	r3, #1
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ec:	4a6e      	ldr	r2, [pc, #440]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	ddf8      	ble.n	80008e4 <HAL_GPIO_EXTI_Callback+0x98>
	EXTI->PR|=GPIO_PIN_7;
 80008f2:	4b6f      	ldr	r3, [pc, #444]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x264>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a6e      	ldr	r2, [pc, #440]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x264>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6153      	str	r3, [r2, #20]
	break;
 80008fe:	e0c8      	b.n	8000a92 <HAL_GPIO_EXTI_Callback+0x246>
{   if(pump2=="b2x\r\n"){
 8000900:	4b6c      	ldr	r3, [pc, #432]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x268>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a6c      	ldr	r2, [pc, #432]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d103      	bne.n	8000912 <HAL_GPIO_EXTI_Callback+0xc6>
	Uart_sendstring("b3x\r\n");
 800090a:	486c      	ldr	r0, [pc, #432]	; (8000abc <HAL_GPIO_EXTI_Callback+0x270>)
 800090c:	f7ff ff14 	bl	8000738 <Uart_sendstring>
 8000910:	e002      	b.n	8000918 <HAL_GPIO_EXTI_Callback+0xcc>
				Uart_sendstring("b2x\r\n");
 8000912:	4869      	ldr	r0, [pc, #420]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000914:	f7ff ff10 	bl	8000738 <Uart_sendstring>
	for(int i=0;i<1000000;i++);
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
 800091c:	e002      	b.n	8000924 <HAL_GPIO_EXTI_Callback+0xd8>
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	3301      	adds	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
 8000924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000926:	4a60      	ldr	r2, [pc, #384]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	ddf8      	ble.n	800091e <HAL_GPIO_EXTI_Callback+0xd2>
	int i=0;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
	while(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)&(i<1000000))
 8000930:	e002      	b.n	8000938 <HAL_GPIO_EXTI_Callback+0xec>
		i++;
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	3301      	adds	r3, #1
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
	while(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)&(i<1000000))
 8000938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093c:	485b      	ldr	r0, [pc, #364]	; (8000aac <HAL_GPIO_EXTI_Callback+0x260>)
 800093e:	f000 ff37 	bl	80017b0 <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf0c      	ite	eq
 8000948:	2301      	moveq	r3, #1
 800094a:	2300      	movne	r3, #0
 800094c:	b2da      	uxtb	r2, r3
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	4955      	ldr	r1, [pc, #340]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000952:	428b      	cmp	r3, r1
 8000954:	bfd4      	ite	le
 8000956:	2301      	movle	r3, #1
 8000958:	2300      	movgt	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4013      	ands	r3, r2
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1e6      	bne.n	8000932 <HAL_GPIO_EXTI_Callback+0xe6>
	for(int i=0;i<1000000;i++);
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
 8000968:	e002      	b.n	8000970 <HAL_GPIO_EXTI_Callback+0x124>
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	3301      	adds	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
 8000970:	6a3b      	ldr	r3, [r7, #32]
 8000972:	4a4d      	ldr	r2, [pc, #308]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	ddf8      	ble.n	800096a <HAL_GPIO_EXTI_Callback+0x11e>
	EXTI->PR|=GPIO_PIN_8;
 8000978:	4b4d      	ldr	r3, [pc, #308]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x264>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4a4c      	ldr	r2, [pc, #304]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x264>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000982:	6153      	str	r3, [r2, #20]
	break;
 8000984:	e085      	b.n	8000a92 <HAL_GPIO_EXTI_Callback+0x246>
{   if(pump3=="c4x\r\n"){
 8000986:	4b4e      	ldr	r3, [pc, #312]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x274>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a4e      	ldr	r2, [pc, #312]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x278>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d103      	bne.n	8000998 <HAL_GPIO_EXTI_Callback+0x14c>
	Uart_sendstring("c5x\r\n");
 8000990:	484d      	ldr	r0, [pc, #308]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000992:	f7ff fed1 	bl	8000738 <Uart_sendstring>
 8000996:	e002      	b.n	800099e <HAL_GPIO_EXTI_Callback+0x152>
				Uart_sendstring("c4x\r\n");
 8000998:	484a      	ldr	r0, [pc, #296]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x278>)
 800099a:	f7ff fecd 	bl	8000738 <Uart_sendstring>
	for(int i=0;i<1000000;i++);
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	e002      	b.n	80009aa <HAL_GPIO_EXTI_Callback+0x15e>
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	4a3e      	ldr	r2, [pc, #248]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	ddf8      	ble.n	80009a4 <HAL_GPIO_EXTI_Callback+0x158>
	int i=0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_9)&(i<1000000))
 80009b6:	e002      	b.n	80009be <HAL_GPIO_EXTI_Callback+0x172>
		i++;
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	3301      	adds	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_9)&(i<1000000))
 80009be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c2:	4842      	ldr	r0, [pc, #264]	; (8000acc <HAL_GPIO_EXTI_Callback+0x280>)
 80009c4:	f000 fef4 	bl	80017b0 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf0c      	ite	eq
 80009ce:	2301      	moveq	r3, #1
 80009d0:	2300      	movne	r3, #0
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	4934      	ldr	r1, [pc, #208]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80009d8:	428b      	cmp	r3, r1
 80009da:	bfd4      	ite	le
 80009dc:	2301      	movle	r3, #1
 80009de:	2300      	movgt	r3, #0
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4013      	ands	r3, r2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1e6      	bne.n	80009b8 <HAL_GPIO_EXTI_Callback+0x16c>
	for(int i=0;i<1000000;i++);
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e002      	b.n	80009f6 <HAL_GPIO_EXTI_Callback+0x1aa>
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	ddf8      	ble.n	80009f0 <HAL_GPIO_EXTI_Callback+0x1a4>
	EXTI->PR|=GPIO_PIN_9;
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a2b      	ldr	r2, [pc, #172]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a08:	6153      	str	r3, [r2, #20]
	break;
 8000a0a:	e042      	b.n	8000a92 <HAL_GPIO_EXTI_Callback+0x246>
{   if(pump4=="d6x\r\n"){
 8000a0c:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x284>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a30      	ldr	r2, [pc, #192]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x288>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d103      	bne.n	8000a1e <HAL_GPIO_EXTI_Callback+0x1d2>
	Uart_sendstring("d7x\r\n");
 8000a16:	4830      	ldr	r0, [pc, #192]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000a18:	f7ff fe8e 	bl	8000738 <Uart_sendstring>
 8000a1c:	e002      	b.n	8000a24 <HAL_GPIO_EXTI_Callback+0x1d8>
				Uart_sendstring("d6x\r\n");
 8000a1e:	482d      	ldr	r0, [pc, #180]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x288>)
 8000a20:	f7ff fe8a 	bl	8000738 <Uart_sendstring>
	for(int i=0;i<1000000;i++);
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	e002      	b.n	8000a30 <HAL_GPIO_EXTI_Callback+0x1e4>
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	ddf8      	ble.n	8000a2a <HAL_GPIO_EXTI_Callback+0x1de>
	int i=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)&(i<1000000))
 8000a3c:	e002      	b.n	8000a44 <HAL_GPIO_EXTI_Callback+0x1f8>
		i++;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)&(i<1000000))
 8000a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a48:	4820      	ldr	r0, [pc, #128]	; (8000acc <HAL_GPIO_EXTI_Callback+0x280>)
 8000a4a:	f000 feb1 	bl	80017b0 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf0c      	ite	eq
 8000a54:	2301      	moveq	r3, #1
 8000a56:	2300      	movne	r3, #0
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4912      	ldr	r1, [pc, #72]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	bfd4      	ite	le
 8000a62:	2301      	movle	r3, #1
 8000a64:	2300      	movgt	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1e6      	bne.n	8000a3e <HAL_GPIO_EXTI_Callback+0x1f2>
	for(int i=0;i<1000000;i++);
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	e002      	b.n	8000a7c <HAL_GPIO_EXTI_Callback+0x230>
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	ddf8      	ble.n	8000a76 <HAL_GPIO_EXTI_Callback+0x22a>
	EXTI->PR|=GPIO_PIN_10;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6153      	str	r3, [r2, #20]
	break;
 8000a90:	bf00      	nop
}
 8000a92:	bf00      	nop
 8000a94:	3738      	adds	r7, #56	; 0x38
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	0800290c 	.word	0x0800290c
 8000aa4:	0800292c 	.word	0x0800292c
 8000aa8:	000f423f 	.word	0x000f423f
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40013c00 	.word	0x40013c00
 8000ab4:	20000004 	.word	0x20000004
 8000ab8:	08002914 	.word	0x08002914
 8000abc:	08002934 	.word	0x08002934
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	0800291c 	.word	0x0800291c
 8000ac8:	0800293c 	.word	0x0800293c
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	2000000c 	.word	0x2000000c
 8000ad4:	08002924 	.word	0x08002924
 8000ad8:	08002944 	.word	0x08002944

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae2:	f000 fb47 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae6:	f000 f8e1 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aea:	f000 f973 	bl	8000dd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000aee:	f000 f947 	bl	8000d80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
Ringbuf_init();
 8000af2:	f7ff fcf1 	bl	80004d8 <Ringbuf_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (IsDataAvailable()){
 8000af6:	f7ff fdfd 	bl	80006f4 <IsDataAvailable>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0fa      	beq.n	8000af6 <main+0x1a>
		  int data= Uart_read();
 8000b00:	f7ff fd8c 	bl	800061c <Uart_read>
 8000b04:	6078      	str	r0, [r7, #4]
//		  Uart_write(data);
		  if(So_sanh("1\r\n")){
 8000b06:	4853      	ldr	r0, [pc, #332]	; (8000c54 <main+0x178>)
 8000b08:	f7ff fe8c 	bl	8000824 <So_sanh>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00e      	beq.n	8000b30 <main+0x54>
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b18:	484f      	ldr	r0, [pc, #316]	; (8000c58 <main+0x17c>)
 8000b1a:	f000 fe61 	bl	80017e0 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2110      	movs	r1, #16
 8000b22:	484e      	ldr	r0, [pc, #312]	; (8000c5c <main+0x180>)
 8000b24:	f000 fe5c 	bl	80017e0 <HAL_GPIO_WritePin>
		  	pump1="a1x\r\n";
 8000b28:	4b4d      	ldr	r3, [pc, #308]	; (8000c60 <main+0x184>)
 8000b2a:	4a4e      	ldr	r2, [pc, #312]	; (8000c64 <main+0x188>)
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	e013      	b.n	8000b58 <main+0x7c>
		  	 }else if(So_sanh("2\r\n")){
 8000b30:	484d      	ldr	r0, [pc, #308]	; (8000c68 <main+0x18c>)
 8000b32:	f7ff fe77 	bl	8000824 <So_sanh>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00d      	beq.n	8000b58 <main+0x7c>
		  	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b42:	4845      	ldr	r0, [pc, #276]	; (8000c58 <main+0x17c>)
 8000b44:	f000 fe4c 	bl	80017e0 <HAL_GPIO_WritePin>
		  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	4843      	ldr	r0, [pc, #268]	; (8000c5c <main+0x180>)
 8000b4e:	f000 fe47 	bl	80017e0 <HAL_GPIO_WritePin>
		  	pump1="a0x\r\n";
 8000b52:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <main+0x184>)
 8000b54:	4a45      	ldr	r2, [pc, #276]	; (8000c6c <main+0x190>)
 8000b56:	601a      	str	r2, [r3, #0]
		  	 }

		  if(So_sanh("3\r\n")){
 8000b58:	4845      	ldr	r0, [pc, #276]	; (8000c70 <main+0x194>)
 8000b5a:	f7ff fe63 	bl	8000824 <So_sanh>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00e      	beq.n	8000b82 <main+0xa6>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	483b      	ldr	r0, [pc, #236]	; (8000c58 <main+0x17c>)
 8000b6c:	f000 fe38 	bl	80017e0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2120      	movs	r1, #32
 8000b74:	4839      	ldr	r0, [pc, #228]	; (8000c5c <main+0x180>)
 8000b76:	f000 fe33 	bl	80017e0 <HAL_GPIO_WritePin>
			  pump2="b3x\r\n";
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <main+0x198>)
 8000b7c:	4a3e      	ldr	r2, [pc, #248]	; (8000c78 <main+0x19c>)
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	e013      	b.n	8000baa <main+0xce>
			  }else if(So_sanh("4\r\n")){
 8000b82:	483e      	ldr	r0, [pc, #248]	; (8000c7c <main+0x1a0>)
 8000b84:	f7ff fe4e 	bl	8000824 <So_sanh>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00d      	beq.n	8000baa <main+0xce>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b94:	4830      	ldr	r0, [pc, #192]	; (8000c58 <main+0x17c>)
 8000b96:	f000 fe23 	bl	80017e0 <HAL_GPIO_WritePin>
			  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	482f      	ldr	r0, [pc, #188]	; (8000c5c <main+0x180>)
 8000ba0:	f000 fe1e 	bl	80017e0 <HAL_GPIO_WritePin>
			  	pump2="b2x\r\n";
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <main+0x198>)
 8000ba6:	4a36      	ldr	r2, [pc, #216]	; (8000c80 <main+0x1a4>)
 8000ba8:	601a      	str	r2, [r3, #0]
			  }
		  if(So_sanh("5\r\n")){
 8000baa:	4836      	ldr	r0, [pc, #216]	; (8000c84 <main+0x1a8>)
 8000bac:	f7ff fe3a 	bl	8000824 <So_sanh>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00e      	beq.n	8000bd4 <main+0xf8>
		  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bbc:	4826      	ldr	r0, [pc, #152]	; (8000c58 <main+0x17c>)
 8000bbe:	f000 fe0f 	bl	80017e0 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	4825      	ldr	r0, [pc, #148]	; (8000c5c <main+0x180>)
 8000bc8:	f000 fe0a 	bl	80017e0 <HAL_GPIO_WritePin>
		  			pump3="c5x\r\n";
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <main+0x1ac>)
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <main+0x1b0>)
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	e013      	b.n	8000bfc <main+0x120>
		  			  }else if(So_sanh("6\r\n")){
 8000bd4:	482e      	ldr	r0, [pc, #184]	; (8000c90 <main+0x1b4>)
 8000bd6:	f7ff fe25 	bl	8000824 <So_sanh>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00d      	beq.n	8000bfc <main+0x120>
		  			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <main+0x17c>)
 8000be8:	f000 fdfa 	bl	80017e0 <HAL_GPIO_WritePin>
		  		  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	481a      	ldr	r0, [pc, #104]	; (8000c5c <main+0x180>)
 8000bf2:	f000 fdf5 	bl	80017e0 <HAL_GPIO_WritePin>
		  		  	pump3="c4x\r\n";
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <main+0x1ac>)
 8000bf8:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <main+0x1b8>)
 8000bfa:	601a      	str	r2, [r3, #0]
		  			  }
		  if(So_sanh("7\r\n")){
 8000bfc:	4826      	ldr	r0, [pc, #152]	; (8000c98 <main+0x1bc>)
 8000bfe:	f7ff fe11 	bl	8000824 <So_sanh>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00e      	beq.n	8000c26 <main+0x14a>
		  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c0e:	4812      	ldr	r0, [pc, #72]	; (8000c58 <main+0x17c>)
 8000c10:	f000 fde6 	bl	80017e0 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <main+0x180>)
 8000c1a:	f000 fde1 	bl	80017e0 <HAL_GPIO_WritePin>
		  			pump4="d7x\r\n";
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <main+0x1c0>)
 8000c20:	4a1f      	ldr	r2, [pc, #124]	; (8000ca0 <main+0x1c4>)
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	e767      	b.n	8000af6 <main+0x1a>
		  			  }else if(So_sanh("8\r\n")){
 8000c26:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <main+0x1c8>)
 8000c28:	f7ff fdfc 	bl	8000824 <So_sanh>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f43f af61 	beq.w	8000af6 <main+0x1a>
		  			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <main+0x17c>)
 8000c3c:	f000 fdd0 	bl	80017e0 <HAL_GPIO_WritePin>
		  		  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <main+0x180>)
 8000c46:	f000 fdcb 	bl	80017e0 <HAL_GPIO_WritePin>
		  		  	pump4="d6x\r\n";
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <main+0x1c0>)
 8000c4c:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <main+0x1cc>)
 8000c4e:	601a      	str	r2, [r3, #0]
	  if (IsDataAvailable()){
 8000c50:	e751      	b.n	8000af6 <main+0x1a>
 8000c52:	bf00      	nop
 8000c54:	0800294c 	.word	0x0800294c
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	20000000 	.word	0x20000000
 8000c64:	0800292c 	.word	0x0800292c
 8000c68:	08002950 	.word	0x08002950
 8000c6c:	0800290c 	.word	0x0800290c
 8000c70:	08002954 	.word	0x08002954
 8000c74:	20000004 	.word	0x20000004
 8000c78:	08002934 	.word	0x08002934
 8000c7c:	08002958 	.word	0x08002958
 8000c80:	08002914 	.word	0x08002914
 8000c84:	0800295c 	.word	0x0800295c
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	0800293c 	.word	0x0800293c
 8000c90:	08002960 	.word	0x08002960
 8000c94:	0800291c 	.word	0x0800291c
 8000c98:	08002964 	.word	0x08002964
 8000c9c:	2000000c 	.word	0x2000000c
 8000ca0:	08002944 	.word	0x08002944
 8000ca4:	08002968 	.word	0x08002968
 8000ca8:	08002924 	.word	0x08002924

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fe12 	bl	80028e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <SystemClock_Config+0xcc>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a27      	ldr	r2, [pc, #156]	; (8000d78 <SystemClock_Config+0xcc>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <SystemClock_Config+0xcc>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <SystemClock_Config+0xd0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <SystemClock_Config+0xd0>)
 8000cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <SystemClock_Config+0xd0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d20:	23a8      	movs	r3, #168	; 0xa8
 8000d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fd87 	bl	8001844 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d3c:	f000 f904 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2302      	movs	r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2105      	movs	r1, #5
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 ffe0 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d6a:	f000 f8ed 	bl	8000f48 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3750      	adds	r7, #80	; 0x50
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40007000 	.word	0x40007000

08000d80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_USART2_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db8:	f001 f9a6 	bl	8002108 <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f000 f8c1 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000068 	.word	0x20000068
 8000dd0:	40004400 	.word	0x40004400

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b50      	ldr	r3, [pc, #320]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a4f      	ldr	r2, [pc, #316]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a48      	ldr	r2, [pc, #288]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a41      	ldr	r2, [pc, #260]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a3a      	ldr	r2, [pc, #232]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e7c:	482d      	ldr	r0, [pc, #180]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000e7e:	f000 fcaf 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	21f0      	movs	r1, #240	; 0xf0
 8000e86:	482c      	ldr	r0, [pc, #176]	; (8000f38 <MX_GPIO_Init+0x164>)
 8000e88:	f000 fcaa 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <MX_GPIO_Init+0x168>)
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4828      	ldr	r0, [pc, #160]	; (8000f40 <MX_GPIO_Init+0x16c>)
 8000ea0:	f000 faec 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ea4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eaa:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <MX_GPIO_Init+0x168>)
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <MX_GPIO_Init+0x170>)
 8000eba:	f000 fadf 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ebe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000ed8:	f000 fad0 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000edc:	23f0      	movs	r3, #240	; 0xf0
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4811      	ldr	r0, [pc, #68]	; (8000f38 <MX_GPIO_Init+0x164>)
 8000ef4:	f000 fac2 	bl	800147c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2006      	movs	r0, #6
 8000efe:	f000 fa86 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f02:	2006      	movs	r0, #6
 8000f04:	f000 fa9f 	bl	8001446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2017      	movs	r0, #23
 8000f0e:	f000 fa7e 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f12:	2017      	movs	r0, #23
 8000f14:	f000 fa97 	bl	8001446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	f000 fa76 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f22:	2028      	movs	r0, #40	; 0x28
 8000f24:	f000 fa8f 	bl	8001446 <HAL_NVIC_EnableIRQ>

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	10110000 	.word	0x10110000
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40021000 	.word	0x40021000

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_UART_MspInit+0x94>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d133      	bne.n	8001032 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001002:	230c      	movs	r3, #12
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001012:	2307      	movs	r3, #7
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <HAL_UART_MspInit+0x9c>)
 800101e:	f000 fa2d 	bl	800147c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2101      	movs	r1, #1
 8001026:	2026      	movs	r0, #38	; 0x26
 8001028:	f000 f9f1 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800102c:	2026      	movs	r0, #38	; 0x26
 800102e:	f000 fa0a 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40004400 	.word	0x40004400
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f8bc 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 fbb3 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80010b6:	2080      	movs	r0, #128	; 0x80
 80010b8:	f000 fbac 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80010bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010c0:	f000 fba8 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80010c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010c8:	f000 fba4 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
 Uart_isr(&huart2);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <USART2_IRQHandler+0x10>)
 80010d6:	f7ff fb43 	bl	8000760 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000068 	.word	0x20000068

080010e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010ec:	f000 fb92 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <SystemInit+0x28>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <SystemInit+0x28>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <SystemInit+0x28>)
 800110a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800110e:	609a      	str	r2, [r3, #8]
#endif
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001124:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001126:	e003      	b.n	8001130 <LoopCopyDataInit>

08001128 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800112a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800112c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800112e:	3104      	adds	r1, #4

08001130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001134:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001136:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001138:	d3f6      	bcc.n	8001128 <CopyDataInit>
  ldr  r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800113c:	e002      	b.n	8001144 <LoopFillZerobss>

0800113e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800113e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001140:	f842 3b04 	str.w	r3, [r2], #4

08001144 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001146:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001148:	d3f9      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114a:	f7ff ffd3 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f001 fba5 	bl	800289c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fcc3 	bl	8000adc <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800115c:	08002994 	.word	0x08002994
  ldr  r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001164:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8001168:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 800116c:	200000ac 	.word	0x200000ac

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f92b 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fed6 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f943 	bl	8001462 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f90b 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000010 	.word	0x20000010
 8001210:	20000018 	.word	0x20000018
 8001214:	20000014 	.word	0x20000014

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000018 	.word	0x20000018
 800123c:	200000a8 	.word	0x200000a8

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200000a8 	.word	0x200000a8

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff29 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff3e 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff8e 	bl	800134c <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff31 	bl	80012bc <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e16b      	b.n	8001770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 815a 	bne.w	800176a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d00b      	beq.n	80014d6 <HAL_GPIO_Init+0x5a>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ca:	2b11      	cmp	r3, #17
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b12      	cmp	r3, #18
 80014d4:	d130      	bne.n	8001538 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 0201 	and.w	r2, r3, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0xfc>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b12      	cmp	r3, #18
 8001576:	d123      	bne.n	80015c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	69b9      	ldr	r1, [r7, #24]
 80015bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80b4 	beq.w	800176a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <HAL_GPIO_Init+0x308>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a5e      	ldr	r2, [pc, #376]	; (8001784 <HAL_GPIO_Init+0x308>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_GPIO_Init+0x308>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161e:	4a5a      	ldr	r2, [pc, #360]	; (8001788 <HAL_GPIO_Init+0x30c>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a51      	ldr	r2, [pc, #324]	; (800178c <HAL_GPIO_Init+0x310>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d02b      	beq.n	80016a2 <HAL_GPIO_Init+0x226>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a50      	ldr	r2, [pc, #320]	; (8001790 <HAL_GPIO_Init+0x314>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d025      	beq.n	800169e <HAL_GPIO_Init+0x222>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4f      	ldr	r2, [pc, #316]	; (8001794 <HAL_GPIO_Init+0x318>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01f      	beq.n	800169a <HAL_GPIO_Init+0x21e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4e      	ldr	r2, [pc, #312]	; (8001798 <HAL_GPIO_Init+0x31c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d019      	beq.n	8001696 <HAL_GPIO_Init+0x21a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4d      	ldr	r2, [pc, #308]	; (800179c <HAL_GPIO_Init+0x320>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0x216>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4c      	ldr	r2, [pc, #304]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00d      	beq.n	800168e <HAL_GPIO_Init+0x212>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4b      	ldr	r2, [pc, #300]	; (80017a4 <HAL_GPIO_Init+0x328>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d007      	beq.n	800168a <HAL_GPIO_Init+0x20e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4a      	ldr	r2, [pc, #296]	; (80017a8 <HAL_GPIO_Init+0x32c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x20a>
 8001682:	2307      	movs	r3, #7
 8001684:	e00e      	b.n	80016a4 <HAL_GPIO_Init+0x228>
 8001686:	2308      	movs	r3, #8
 8001688:	e00c      	b.n	80016a4 <HAL_GPIO_Init+0x228>
 800168a:	2306      	movs	r3, #6
 800168c:	e00a      	b.n	80016a4 <HAL_GPIO_Init+0x228>
 800168e:	2305      	movs	r3, #5
 8001690:	e008      	b.n	80016a4 <HAL_GPIO_Init+0x228>
 8001692:	2304      	movs	r3, #4
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x228>
 8001696:	2303      	movs	r3, #3
 8001698:	e004      	b.n	80016a4 <HAL_GPIO_Init+0x228>
 800169a:	2302      	movs	r3, #2
 800169c:	e002      	b.n	80016a4 <HAL_GPIO_Init+0x228>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_GPIO_Init+0x228>
 80016a2:	2300      	movs	r3, #0
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	f002 0203 	and.w	r2, r2, #3
 80016aa:	0092      	lsls	r2, r2, #2
 80016ac:	4093      	lsls	r3, r2
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b4:	4934      	ldr	r1, [pc, #208]	; (8001788 <HAL_GPIO_Init+0x30c>)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3302      	adds	r3, #2
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c2:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <HAL_GPIO_Init+0x330>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e6:	4a31      	ldr	r2, [pc, #196]	; (80017ac <HAL_GPIO_Init+0x330>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016ec:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <HAL_GPIO_Init+0x330>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_GPIO_Init+0x330>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_GPIO_Init+0x330>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <HAL_GPIO_Init+0x330>)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_GPIO_Init+0x330>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_GPIO_Init+0x330>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3301      	adds	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2b0f      	cmp	r3, #15
 8001774:	f67f ae90 	bls.w	8001498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001778:	bf00      	nop
 800177a:	3724      	adds	r7, #36	; 0x24
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40023800 	.word	0x40023800
 8001788:	40013800 	.word	0x40013800
 800178c:	40020000 	.word	0x40020000
 8001790:	40020400 	.word	0x40020400
 8001794:	40020800 	.word	0x40020800
 8001798:	40020c00 	.word	0x40020c00
 800179c:	40021000 	.word	0x40021000
 80017a0:	40021400 	.word	0x40021400
 80017a4:	40021800 	.word	0x40021800
 80017a8:	40021c00 	.word	0x40021c00
 80017ac:	40013c00 	.word	0x40013c00

080017b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e001      	b.n	80017d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017fc:	e003      	b.n	8001806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f80a 	bl	800084c <HAL_GPIO_EXTI_Callback>
  }
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40013c00 	.word	0x40013c00

08001844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e25b      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d075      	beq.n	800194e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001862:	4ba3      	ldr	r3, [pc, #652]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b04      	cmp	r3, #4
 800186c:	d00c      	beq.n	8001888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186e:	4ba0      	ldr	r3, [pc, #640]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001876:	2b08      	cmp	r3, #8
 8001878:	d112      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187a:	4b9d      	ldr	r3, [pc, #628]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	4b99      	ldr	r3, [pc, #612]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d05b      	beq.n	800194c <HAL_RCC_OscConfig+0x108>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d157      	bne.n	800194c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e236      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x74>
 80018aa:	4b91      	ldr	r3, [pc, #580]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a90      	ldr	r2, [pc, #576]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x98>
 80018c2:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a8a      	ldr	r2, [pc, #552]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a87      	ldr	r2, [pc, #540]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018dc:	4b84      	ldr	r3, [pc, #528]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a83      	ldr	r2, [pc, #524]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a80      	ldr	r2, [pc, #512]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fca0 	bl	8001240 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fc9c 	bl	8001240 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1fb      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xc0>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fc8c 	bl	8001240 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fc88 	bl	8001240 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1e7      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	4b6c      	ldr	r3, [pc, #432]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0xe8>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d063      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195a:	4b65      	ldr	r3, [pc, #404]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196e:	2b08      	cmp	r3, #8
 8001970:	d11c      	bne.n	80019ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001972:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d116      	bne.n	80019ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x152>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e1bb      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4952      	ldr	r1, [pc, #328]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	e03a      	b.n	8001a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	4b4f      	ldr	r3, [pc, #316]	; (8001af4 <HAL_RCC_OscConfig+0x2b0>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff fc41 	bl	8001240 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c2:	f7ff fc3d 	bl	8001240 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e19c      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4940      	ldr	r1, [pc, #256]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	e015      	b.n	8001a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_RCC_OscConfig+0x2b0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fc20 	bl	8001240 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fc1c 	bl	8001240 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e17b      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d030      	beq.n	8001a90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d016      	beq.n	8001a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_RCC_OscConfig+0x2b4>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fc00 	bl	8001240 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff fbfc 	bl	8001240 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e15b      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x200>
 8001a62:	e015      	b.n	8001a90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x2b4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fbe9 	bl	8001240 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff fbe5 	bl	8001240 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e144      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a0 	beq.w	8001bde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x2b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d121      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_RCC_OscConfig+0x2b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_RCC_OscConfig+0x2b8>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fbab 	bl	8001240 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e011      	b.n	8001b12 <HAL_RCC_OscConfig+0x2ce>
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	42470000 	.word	0x42470000
 8001af8:	42470e80 	.word	0x42470e80
 8001afc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff fb9e 	bl	8001240 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0fd      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b81      	ldr	r3, [pc, #516]	; (8001d18 <HAL_RCC_OscConfig+0x4d4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2f0>
 8001b26:	4b7d      	ldr	r3, [pc, #500]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a7c      	ldr	r2, [pc, #496]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	e01c      	b.n	8001b6e <HAL_RCC_OscConfig+0x32a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x312>
 8001b3c:	4b77      	ldr	r3, [pc, #476]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a76      	ldr	r2, [pc, #472]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
 8001b48:	4b74      	ldr	r3, [pc, #464]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a73      	ldr	r2, [pc, #460]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x32a>
 8001b56:	4b71      	ldr	r3, [pc, #452]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a70      	ldr	r2, [pc, #448]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	4b6e      	ldr	r3, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a6d      	ldr	r2, [pc, #436]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d015      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff fb63 	bl	8001240 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fb5f 	bl	8001240 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0bc      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ee      	beq.n	8001b7e <HAL_RCC_OscConfig+0x33a>
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fb4d 	bl	8001240 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff fb49 	bl	8001240 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0a6      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd2:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8092 	beq.w	8001d0c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001be8:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d05c      	beq.n	8001cae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d141      	bne.n	8001c80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <HAL_RCC_OscConfig+0x4dc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fb1d 	bl	8001240 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff fb19 	bl	8001240 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e078      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69da      	ldr	r2, [r3, #28]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	019b      	lsls	r3, r3, #6
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	085b      	lsrs	r3, r3, #1
 8001c40:	3b01      	subs	r3, #1
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	061b      	lsls	r3, r3, #24
 8001c4c:	4933      	ldr	r1, [pc, #204]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c52:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <HAL_RCC_OscConfig+0x4dc>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff faf2 	bl	8001240 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff faee 	bl	8001240 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04d      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x41c>
 8001c7e:	e045      	b.n	8001d0c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_OscConfig+0x4dc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fadb 	bl	8001240 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff fad7 	bl	8001240 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e036      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x44a>
 8001cac:	e02e      	b.n	8001d0c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e029      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_RCC_OscConfig+0x4d8>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d115      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d10d      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	42470060 	.word	0x42470060

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0cc      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b68      	ldr	r3, [pc, #416]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d90c      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b65      	ldr	r3, [pc, #404]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0b8      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d78:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9c:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	494d      	ldr	r1, [pc, #308]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d044      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d119      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e07f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e06f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e067      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4934      	ldr	r1, [pc, #208]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e14:	f7ff fa14 	bl	8001240 <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff fa10 	bl	8001240 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e04f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d20c      	bcs.n	8001e6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e032      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4916      	ldr	r1, [pc, #88]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eaa:	f000 f821 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001eae:	4601      	mov	r1, r0
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f974 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	0800296c 	.word	0x0800296c
 8001ee8:	20000010 	.word	0x20000010
 8001eec:	20000014 	.word	0x20000014

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d007      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x32>
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d008      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x38>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80b4 	bne.w	8002084 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f1e:	60bb      	str	r3, [r7, #8]
       break;
 8001f20:	e0b3      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f22:	4b5e      	ldr	r3, [pc, #376]	; (800209c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f24:	60bb      	str	r3, [r7, #8]
      break;
 8001f26:	e0b0      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f28:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f32:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d04a      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3e:	4b55      	ldr	r3, [pc, #340]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	f04f 0400 	mov.w	r4, #0
 8001f48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	ea03 0501 	and.w	r5, r3, r1
 8001f54:	ea04 0602 	and.w	r6, r4, r2
 8001f58:	4629      	mov	r1, r5
 8001f5a:	4632      	mov	r2, r6
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	f04f 0400 	mov.w	r4, #0
 8001f64:	0154      	lsls	r4, r2, #5
 8001f66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f6a:	014b      	lsls	r3, r1, #5
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4622      	mov	r2, r4
 8001f70:	1b49      	subs	r1, r1, r5
 8001f72:	eb62 0206 	sbc.w	r2, r2, r6
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	f04f 0400 	mov.w	r4, #0
 8001f7e:	0194      	lsls	r4, r2, #6
 8001f80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f84:	018b      	lsls	r3, r1, #6
 8001f86:	1a5b      	subs	r3, r3, r1
 8001f88:	eb64 0402 	sbc.w	r4, r4, r2
 8001f8c:	f04f 0100 	mov.w	r1, #0
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	00e2      	lsls	r2, r4, #3
 8001f96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f9a:	00d9      	lsls	r1, r3, #3
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	195b      	adds	r3, r3, r5
 8001fa2:	eb44 0406 	adc.w	r4, r4, r6
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	0262      	lsls	r2, r4, #9
 8001fb0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fb4:	0259      	lsls	r1, r3, #9
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4614      	mov	r4, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	f7fe f906 	bl	80001d8 <__aeabi_uldivmod>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	460c      	mov	r4, r1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e049      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	f04f 0400 	mov.w	r4, #0
 8001fde:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	ea03 0501 	and.w	r5, r3, r1
 8001fea:	ea04 0602 	and.w	r6, r4, r2
 8001fee:	4629      	mov	r1, r5
 8001ff0:	4632      	mov	r2, r6
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	f04f 0400 	mov.w	r4, #0
 8001ffa:	0154      	lsls	r4, r2, #5
 8001ffc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002000:	014b      	lsls	r3, r1, #5
 8002002:	4619      	mov	r1, r3
 8002004:	4622      	mov	r2, r4
 8002006:	1b49      	subs	r1, r1, r5
 8002008:	eb62 0206 	sbc.w	r2, r2, r6
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	f04f 0400 	mov.w	r4, #0
 8002014:	0194      	lsls	r4, r2, #6
 8002016:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800201a:	018b      	lsls	r3, r1, #6
 800201c:	1a5b      	subs	r3, r3, r1
 800201e:	eb64 0402 	sbc.w	r4, r4, r2
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	00e2      	lsls	r2, r4, #3
 800202c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002030:	00d9      	lsls	r1, r3, #3
 8002032:	460b      	mov	r3, r1
 8002034:	4614      	mov	r4, r2
 8002036:	195b      	adds	r3, r3, r5
 8002038:	eb44 0406 	adc.w	r4, r4, r6
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	02a2      	lsls	r2, r4, #10
 8002046:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800204a:	0299      	lsls	r1, r3, #10
 800204c:	460b      	mov	r3, r1
 800204e:	4614      	mov	r4, r2
 8002050:	4618      	mov	r0, r3
 8002052:	4621      	mov	r1, r4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f04f 0400 	mov.w	r4, #0
 800205a:	461a      	mov	r2, r3
 800205c:	4623      	mov	r3, r4
 800205e:	f7fe f8bb 	bl	80001d8 <__aeabi_uldivmod>
 8002062:	4603      	mov	r3, r0
 8002064:	460c      	mov	r4, r1
 8002066:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	3301      	adds	r3, #1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	60bb      	str	r3, [r7, #8]
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002086:	60bb      	str	r3, [r7, #8]
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	68bb      	ldr	r3, [r7, #8]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000010 	.word	0x20000010

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4601      	mov	r1, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	0800297c 	.word	0x0800297c

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffdc 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020e8:	4601      	mov	r1, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0b5b      	lsrs	r3, r3, #13
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	0800297c 	.word	0x0800297c

08002108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e03f      	b.n	800219a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe ff3a 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f829 	bl	80021a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021e6:	f023 030c 	bic.w	r3, r3, #12
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002212:	f040 818b 	bne.w	800252c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4ac1      	ldr	r2, [pc, #772]	; (8002520 <UART_SetConfig+0x37c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d005      	beq.n	800222c <UART_SetConfig+0x88>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4abf      	ldr	r2, [pc, #764]	; (8002524 <UART_SetConfig+0x380>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f040 80bd 	bne.w	80023a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800222c:	f7ff ff58 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002230:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	461d      	mov	r5, r3
 8002236:	f04f 0600 	mov.w	r6, #0
 800223a:	46a8      	mov	r8, r5
 800223c:	46b1      	mov	r9, r6
 800223e:	eb18 0308 	adds.w	r3, r8, r8
 8002242:	eb49 0409 	adc.w	r4, r9, r9
 8002246:	4698      	mov	r8, r3
 8002248:	46a1      	mov	r9, r4
 800224a:	eb18 0805 	adds.w	r8, r8, r5
 800224e:	eb49 0906 	adc.w	r9, r9, r6
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800225e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002262:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002266:	4688      	mov	r8, r1
 8002268:	4691      	mov	r9, r2
 800226a:	eb18 0005 	adds.w	r0, r8, r5
 800226e:	eb49 0106 	adc.w	r1, r9, r6
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	461d      	mov	r5, r3
 8002278:	f04f 0600 	mov.w	r6, #0
 800227c:	196b      	adds	r3, r5, r5
 800227e:	eb46 0406 	adc.w	r4, r6, r6
 8002282:	461a      	mov	r2, r3
 8002284:	4623      	mov	r3, r4
 8002286:	f7fd ffa7 	bl	80001d8 <__aeabi_uldivmod>
 800228a:	4603      	mov	r3, r0
 800228c:	460c      	mov	r4, r1
 800228e:	461a      	mov	r2, r3
 8002290:	4ba5      	ldr	r3, [pc, #660]	; (8002528 <UART_SetConfig+0x384>)
 8002292:	fba3 2302 	umull	r2, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	461d      	mov	r5, r3
 80022a0:	f04f 0600 	mov.w	r6, #0
 80022a4:	46a9      	mov	r9, r5
 80022a6:	46b2      	mov	sl, r6
 80022a8:	eb19 0309 	adds.w	r3, r9, r9
 80022ac:	eb4a 040a 	adc.w	r4, sl, sl
 80022b0:	4699      	mov	r9, r3
 80022b2:	46a2      	mov	sl, r4
 80022b4:	eb19 0905 	adds.w	r9, r9, r5
 80022b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022d0:	4689      	mov	r9, r1
 80022d2:	4692      	mov	sl, r2
 80022d4:	eb19 0005 	adds.w	r0, r9, r5
 80022d8:	eb4a 0106 	adc.w	r1, sl, r6
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	461d      	mov	r5, r3
 80022e2:	f04f 0600 	mov.w	r6, #0
 80022e6:	196b      	adds	r3, r5, r5
 80022e8:	eb46 0406 	adc.w	r4, r6, r6
 80022ec:	461a      	mov	r2, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	f7fd ff72 	bl	80001d8 <__aeabi_uldivmod>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <UART_SetConfig+0x384>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	2164      	movs	r1, #100	; 0x64
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	3332      	adds	r3, #50	; 0x32
 800230e:	4a86      	ldr	r2, [pc, #536]	; (8002528 <UART_SetConfig+0x384>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800231c:	4498      	add	r8, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	461d      	mov	r5, r3
 8002322:	f04f 0600 	mov.w	r6, #0
 8002326:	46a9      	mov	r9, r5
 8002328:	46b2      	mov	sl, r6
 800232a:	eb19 0309 	adds.w	r3, r9, r9
 800232e:	eb4a 040a 	adc.w	r4, sl, sl
 8002332:	4699      	mov	r9, r3
 8002334:	46a2      	mov	sl, r4
 8002336:	eb19 0905 	adds.w	r9, r9, r5
 800233a:	eb4a 0a06 	adc.w	sl, sl, r6
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800234a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800234e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002352:	4689      	mov	r9, r1
 8002354:	4692      	mov	sl, r2
 8002356:	eb19 0005 	adds.w	r0, r9, r5
 800235a:	eb4a 0106 	adc.w	r1, sl, r6
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	461d      	mov	r5, r3
 8002364:	f04f 0600 	mov.w	r6, #0
 8002368:	196b      	adds	r3, r5, r5
 800236a:	eb46 0406 	adc.w	r4, r6, r6
 800236e:	461a      	mov	r2, r3
 8002370:	4623      	mov	r3, r4
 8002372:	f7fd ff31 	bl	80001d8 <__aeabi_uldivmod>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	461a      	mov	r2, r3
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <UART_SetConfig+0x384>)
 800237e:	fba3 1302 	umull	r1, r3, r3, r2
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2164      	movs	r1, #100	; 0x64
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	3332      	adds	r3, #50	; 0x32
 8002390:	4a65      	ldr	r2, [pc, #404]	; (8002528 <UART_SetConfig+0x384>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	f003 0207 	and.w	r2, r3, #7
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4442      	add	r2, r8
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	e26f      	b.n	8002886 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023a6:	f7ff fe87 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 80023aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	461d      	mov	r5, r3
 80023b0:	f04f 0600 	mov.w	r6, #0
 80023b4:	46a8      	mov	r8, r5
 80023b6:	46b1      	mov	r9, r6
 80023b8:	eb18 0308 	adds.w	r3, r8, r8
 80023bc:	eb49 0409 	adc.w	r4, r9, r9
 80023c0:	4698      	mov	r8, r3
 80023c2:	46a1      	mov	r9, r4
 80023c4:	eb18 0805 	adds.w	r8, r8, r5
 80023c8:	eb49 0906 	adc.w	r9, r9, r6
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023e0:	4688      	mov	r8, r1
 80023e2:	4691      	mov	r9, r2
 80023e4:	eb18 0005 	adds.w	r0, r8, r5
 80023e8:	eb49 0106 	adc.w	r1, r9, r6
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	461d      	mov	r5, r3
 80023f2:	f04f 0600 	mov.w	r6, #0
 80023f6:	196b      	adds	r3, r5, r5
 80023f8:	eb46 0406 	adc.w	r4, r6, r6
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	f7fd feea 	bl	80001d8 <__aeabi_uldivmod>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	461a      	mov	r2, r3
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <UART_SetConfig+0x384>)
 800240c:	fba3 2302 	umull	r2, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	461d      	mov	r5, r3
 800241a:	f04f 0600 	mov.w	r6, #0
 800241e:	46a9      	mov	r9, r5
 8002420:	46b2      	mov	sl, r6
 8002422:	eb19 0309 	adds.w	r3, r9, r9
 8002426:	eb4a 040a 	adc.w	r4, sl, sl
 800242a:	4699      	mov	r9, r3
 800242c:	46a2      	mov	sl, r4
 800242e:	eb19 0905 	adds.w	r9, r9, r5
 8002432:	eb4a 0a06 	adc.w	sl, sl, r6
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800244a:	4689      	mov	r9, r1
 800244c:	4692      	mov	sl, r2
 800244e:	eb19 0005 	adds.w	r0, r9, r5
 8002452:	eb4a 0106 	adc.w	r1, sl, r6
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	461d      	mov	r5, r3
 800245c:	f04f 0600 	mov.w	r6, #0
 8002460:	196b      	adds	r3, r5, r5
 8002462:	eb46 0406 	adc.w	r4, r6, r6
 8002466:	461a      	mov	r2, r3
 8002468:	4623      	mov	r3, r4
 800246a:	f7fd feb5 	bl	80001d8 <__aeabi_uldivmod>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	461a      	mov	r2, r3
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <UART_SetConfig+0x384>)
 8002476:	fba3 1302 	umull	r1, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2164      	movs	r1, #100	; 0x64
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	3332      	adds	r3, #50	; 0x32
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <UART_SetConfig+0x384>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002496:	4498      	add	r8, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	461d      	mov	r5, r3
 800249c:	f04f 0600 	mov.w	r6, #0
 80024a0:	46a9      	mov	r9, r5
 80024a2:	46b2      	mov	sl, r6
 80024a4:	eb19 0309 	adds.w	r3, r9, r9
 80024a8:	eb4a 040a 	adc.w	r4, sl, sl
 80024ac:	4699      	mov	r9, r3
 80024ae:	46a2      	mov	sl, r4
 80024b0:	eb19 0905 	adds.w	r9, r9, r5
 80024b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024cc:	4689      	mov	r9, r1
 80024ce:	4692      	mov	sl, r2
 80024d0:	eb19 0005 	adds.w	r0, r9, r5
 80024d4:	eb4a 0106 	adc.w	r1, sl, r6
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	461d      	mov	r5, r3
 80024de:	f04f 0600 	mov.w	r6, #0
 80024e2:	196b      	adds	r3, r5, r5
 80024e4:	eb46 0406 	adc.w	r4, r6, r6
 80024e8:	461a      	mov	r2, r3
 80024ea:	4623      	mov	r3, r4
 80024ec:	f7fd fe74 	bl	80001d8 <__aeabi_uldivmod>
 80024f0:	4603      	mov	r3, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <UART_SetConfig+0x384>)
 80024f8:	fba3 1302 	umull	r1, r3, r3, r2
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	2164      	movs	r1, #100	; 0x64
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	3332      	adds	r3, #50	; 0x32
 800250a:	4a07      	ldr	r2, [pc, #28]	; (8002528 <UART_SetConfig+0x384>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	f003 0207 	and.w	r2, r3, #7
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4442      	add	r2, r8
 800251c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800251e:	e1b2      	b.n	8002886 <UART_SetConfig+0x6e2>
 8002520:	40011000 	.word	0x40011000
 8002524:	40011400 	.word	0x40011400
 8002528:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4ad7      	ldr	r2, [pc, #860]	; (8002890 <UART_SetConfig+0x6ec>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d005      	beq.n	8002542 <UART_SetConfig+0x39e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4ad6      	ldr	r2, [pc, #856]	; (8002894 <UART_SetConfig+0x6f0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	f040 80d1 	bne.w	80026e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002542:	f7ff fdcd 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002546:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	469a      	mov	sl, r3
 800254c:	f04f 0b00 	mov.w	fp, #0
 8002550:	46d0      	mov	r8, sl
 8002552:	46d9      	mov	r9, fp
 8002554:	eb18 0308 	adds.w	r3, r8, r8
 8002558:	eb49 0409 	adc.w	r4, r9, r9
 800255c:	4698      	mov	r8, r3
 800255e:	46a1      	mov	r9, r4
 8002560:	eb18 080a 	adds.w	r8, r8, sl
 8002564:	eb49 090b 	adc.w	r9, r9, fp
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002574:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002578:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800257c:	4688      	mov	r8, r1
 800257e:	4691      	mov	r9, r2
 8002580:	eb1a 0508 	adds.w	r5, sl, r8
 8002584:	eb4b 0609 	adc.w	r6, fp, r9
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4619      	mov	r1, r3
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	f04f 0400 	mov.w	r4, #0
 800259a:	0094      	lsls	r4, r2, #2
 800259c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025a0:	008b      	lsls	r3, r1, #2
 80025a2:	461a      	mov	r2, r3
 80025a4:	4623      	mov	r3, r4
 80025a6:	4628      	mov	r0, r5
 80025a8:	4631      	mov	r1, r6
 80025aa:	f7fd fe15 	bl	80001d8 <__aeabi_uldivmod>
 80025ae:	4603      	mov	r3, r0
 80025b0:	460c      	mov	r4, r1
 80025b2:	461a      	mov	r2, r3
 80025b4:	4bb8      	ldr	r3, [pc, #736]	; (8002898 <UART_SetConfig+0x6f4>)
 80025b6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	469b      	mov	fp, r3
 80025c4:	f04f 0c00 	mov.w	ip, #0
 80025c8:	46d9      	mov	r9, fp
 80025ca:	46e2      	mov	sl, ip
 80025cc:	eb19 0309 	adds.w	r3, r9, r9
 80025d0:	eb4a 040a 	adc.w	r4, sl, sl
 80025d4:	4699      	mov	r9, r3
 80025d6:	46a2      	mov	sl, r4
 80025d8:	eb19 090b 	adds.w	r9, r9, fp
 80025dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025f4:	4689      	mov	r9, r1
 80025f6:	4692      	mov	sl, r2
 80025f8:	eb1b 0509 	adds.w	r5, fp, r9
 80025fc:	eb4c 060a 	adc.w	r6, ip, sl
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4619      	mov	r1, r3
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	f04f 0400 	mov.w	r4, #0
 8002612:	0094      	lsls	r4, r2, #2
 8002614:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002618:	008b      	lsls	r3, r1, #2
 800261a:	461a      	mov	r2, r3
 800261c:	4623      	mov	r3, r4
 800261e:	4628      	mov	r0, r5
 8002620:	4631      	mov	r1, r6
 8002622:	f7fd fdd9 	bl	80001d8 <__aeabi_uldivmod>
 8002626:	4603      	mov	r3, r0
 8002628:	460c      	mov	r4, r1
 800262a:	461a      	mov	r2, r3
 800262c:	4b9a      	ldr	r3, [pc, #616]	; (8002898 <UART_SetConfig+0x6f4>)
 800262e:	fba3 1302 	umull	r1, r3, r3, r2
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2164      	movs	r1, #100	; 0x64
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	3332      	adds	r3, #50	; 0x32
 8002640:	4a95      	ldr	r2, [pc, #596]	; (8002898 <UART_SetConfig+0x6f4>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264c:	4498      	add	r8, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	469b      	mov	fp, r3
 8002652:	f04f 0c00 	mov.w	ip, #0
 8002656:	46d9      	mov	r9, fp
 8002658:	46e2      	mov	sl, ip
 800265a:	eb19 0309 	adds.w	r3, r9, r9
 800265e:	eb4a 040a 	adc.w	r4, sl, sl
 8002662:	4699      	mov	r9, r3
 8002664:	46a2      	mov	sl, r4
 8002666:	eb19 090b 	adds.w	r9, r9, fp
 800266a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800267a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800267e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002682:	4689      	mov	r9, r1
 8002684:	4692      	mov	sl, r2
 8002686:	eb1b 0509 	adds.w	r5, fp, r9
 800268a:	eb4c 060a 	adc.w	r6, ip, sl
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4619      	mov	r1, r3
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	f04f 0400 	mov.w	r4, #0
 80026a0:	0094      	lsls	r4, r2, #2
 80026a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026a6:	008b      	lsls	r3, r1, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	4623      	mov	r3, r4
 80026ac:	4628      	mov	r0, r5
 80026ae:	4631      	mov	r1, r6
 80026b0:	f7fd fd92 	bl	80001d8 <__aeabi_uldivmod>
 80026b4:	4603      	mov	r3, r0
 80026b6:	460c      	mov	r4, r1
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b77      	ldr	r3, [pc, #476]	; (8002898 <UART_SetConfig+0x6f4>)
 80026bc:	fba3 1302 	umull	r1, r3, r3, r2
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	2164      	movs	r1, #100	; 0x64
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	3332      	adds	r3, #50	; 0x32
 80026ce:	4a72      	ldr	r2, [pc, #456]	; (8002898 <UART_SetConfig+0x6f4>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4442      	add	r2, r8
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	e0d0      	b.n	8002886 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80026e4:	f7ff fce8 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 80026e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	469a      	mov	sl, r3
 80026ee:	f04f 0b00 	mov.w	fp, #0
 80026f2:	46d0      	mov	r8, sl
 80026f4:	46d9      	mov	r9, fp
 80026f6:	eb18 0308 	adds.w	r3, r8, r8
 80026fa:	eb49 0409 	adc.w	r4, r9, r9
 80026fe:	4698      	mov	r8, r3
 8002700:	46a1      	mov	r9, r4
 8002702:	eb18 080a 	adds.w	r8, r8, sl
 8002706:	eb49 090b 	adc.w	r9, r9, fp
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002716:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800271a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800271e:	4688      	mov	r8, r1
 8002720:	4691      	mov	r9, r2
 8002722:	eb1a 0508 	adds.w	r5, sl, r8
 8002726:	eb4b 0609 	adc.w	r6, fp, r9
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4619      	mov	r1, r3
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	f04f 0400 	mov.w	r4, #0
 800273c:	0094      	lsls	r4, r2, #2
 800273e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002742:	008b      	lsls	r3, r1, #2
 8002744:	461a      	mov	r2, r3
 8002746:	4623      	mov	r3, r4
 8002748:	4628      	mov	r0, r5
 800274a:	4631      	mov	r1, r6
 800274c:	f7fd fd44 	bl	80001d8 <__aeabi_uldivmod>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	461a      	mov	r2, r3
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <UART_SetConfig+0x6f4>)
 8002758:	fba3 2302 	umull	r2, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	469b      	mov	fp, r3
 8002766:	f04f 0c00 	mov.w	ip, #0
 800276a:	46d9      	mov	r9, fp
 800276c:	46e2      	mov	sl, ip
 800276e:	eb19 0309 	adds.w	r3, r9, r9
 8002772:	eb4a 040a 	adc.w	r4, sl, sl
 8002776:	4699      	mov	r9, r3
 8002778:	46a2      	mov	sl, r4
 800277a:	eb19 090b 	adds.w	r9, r9, fp
 800277e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800278e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002796:	4689      	mov	r9, r1
 8002798:	4692      	mov	sl, r2
 800279a:	eb1b 0509 	adds.w	r5, fp, r9
 800279e:	eb4c 060a 	adc.w	r6, ip, sl
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4619      	mov	r1, r3
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	f04f 0400 	mov.w	r4, #0
 80027b4:	0094      	lsls	r4, r2, #2
 80027b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027ba:	008b      	lsls	r3, r1, #2
 80027bc:	461a      	mov	r2, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	4628      	mov	r0, r5
 80027c2:	4631      	mov	r1, r6
 80027c4:	f7fd fd08 	bl	80001d8 <__aeabi_uldivmod>
 80027c8:	4603      	mov	r3, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <UART_SetConfig+0x6f4>)
 80027d0:	fba3 1302 	umull	r1, r3, r3, r2
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	2164      	movs	r1, #100	; 0x64
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	3332      	adds	r3, #50	; 0x32
 80027e2:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <UART_SetConfig+0x6f4>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ee:	4498      	add	r8, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	469b      	mov	fp, r3
 80027f4:	f04f 0c00 	mov.w	ip, #0
 80027f8:	46d9      	mov	r9, fp
 80027fa:	46e2      	mov	sl, ip
 80027fc:	eb19 0309 	adds.w	r3, r9, r9
 8002800:	eb4a 040a 	adc.w	r4, sl, sl
 8002804:	4699      	mov	r9, r3
 8002806:	46a2      	mov	sl, r4
 8002808:	eb19 090b 	adds.w	r9, r9, fp
 800280c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800281c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002824:	4689      	mov	r9, r1
 8002826:	4692      	mov	sl, r2
 8002828:	eb1b 0509 	adds.w	r5, fp, r9
 800282c:	eb4c 060a 	adc.w	r6, ip, sl
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	f04f 0400 	mov.w	r4, #0
 8002842:	0094      	lsls	r4, r2, #2
 8002844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002848:	008b      	lsls	r3, r1, #2
 800284a:	461a      	mov	r2, r3
 800284c:	4623      	mov	r3, r4
 800284e:	4628      	mov	r0, r5
 8002850:	4631      	mov	r1, r6
 8002852:	f7fd fcc1 	bl	80001d8 <__aeabi_uldivmod>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	461a      	mov	r2, r3
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <UART_SetConfig+0x6f4>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2164      	movs	r1, #100	; 0x64
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	3332      	adds	r3, #50	; 0x32
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <UART_SetConfig+0x6f4>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4442      	add	r2, r8
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	e7ff      	b.n	8002886 <UART_SetConfig+0x6e2>
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002890:	40011000 	.word	0x40011000
 8002894:	40011400 	.word	0x40011400
 8002898:	51eb851f 	.word	0x51eb851f

0800289c <__libc_init_array>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	4e0d      	ldr	r6, [pc, #52]	; (80028d4 <__libc_init_array+0x38>)
 80028a0:	4c0d      	ldr	r4, [pc, #52]	; (80028d8 <__libc_init_array+0x3c>)
 80028a2:	1ba4      	subs	r4, r4, r6
 80028a4:	10a4      	asrs	r4, r4, #2
 80028a6:	2500      	movs	r5, #0
 80028a8:	42a5      	cmp	r5, r4
 80028aa:	d109      	bne.n	80028c0 <__libc_init_array+0x24>
 80028ac:	4e0b      	ldr	r6, [pc, #44]	; (80028dc <__libc_init_array+0x40>)
 80028ae:	4c0c      	ldr	r4, [pc, #48]	; (80028e0 <__libc_init_array+0x44>)
 80028b0:	f000 f820 	bl	80028f4 <_init>
 80028b4:	1ba4      	subs	r4, r4, r6
 80028b6:	10a4      	asrs	r4, r4, #2
 80028b8:	2500      	movs	r5, #0
 80028ba:	42a5      	cmp	r5, r4
 80028bc:	d105      	bne.n	80028ca <__libc_init_array+0x2e>
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028c4:	4798      	blx	r3
 80028c6:	3501      	adds	r5, #1
 80028c8:	e7ee      	b.n	80028a8 <__libc_init_array+0xc>
 80028ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ce:	4798      	blx	r3
 80028d0:	3501      	adds	r5, #1
 80028d2:	e7f2      	b.n	80028ba <__libc_init_array+0x1e>
 80028d4:	0800298c 	.word	0x0800298c
 80028d8:	0800298c 	.word	0x0800298c
 80028dc:	0800298c 	.word	0x0800298c
 80028e0:	08002990 	.word	0x08002990

080028e4 <memset>:
 80028e4:	4402      	add	r2, r0
 80028e6:	4603      	mov	r3, r0
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d100      	bne.n	80028ee <memset+0xa>
 80028ec:	4770      	bx	lr
 80028ee:	f803 1b01 	strb.w	r1, [r3], #1
 80028f2:	e7f9      	b.n	80028e8 <memset+0x4>

080028f4 <_init>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	bf00      	nop
 80028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fa:	bc08      	pop	{r3}
 80028fc:	469e      	mov	lr, r3
 80028fe:	4770      	bx	lr

08002900 <_fini>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	bf00      	nop
 8002904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002906:	bc08      	pop	{r3}
 8002908:	469e      	mov	lr, r3
 800290a:	4770      	bx	lr
